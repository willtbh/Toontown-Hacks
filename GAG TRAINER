import urllib
from direct.interval.IntervalGlobal import *
from pandac.PandaModules import *
from toontown.toon import DistributedNPCToon
from toontown.safezone import Playground
from toontown.battle import SuitBattleGlobals
from toontown.building import DistributedBuilding
from toontown.battle import DistributedBattleBldg
from toontown.suit import SuitDNA
from toontown.quest import Quests
from toontown.quest import QuestBookPoster
from toontown.toon import ToonHead
from toontown.building import DistributedDoor
from toontown.safezone import DistributedPartyGate
from toontown.safezone import DistributedTrolley
from toontown.toon import DistributedNPCFisherman
from toontown.toon import DistributedNPCPartyPerson
from toontown.shtiker import PurchaseManager
from toontown.minigame import DistributedMinigame
from toontown.estate import Estate
from toontown.estate import House

HQZONES=[10000,11000,12000,13000]
        
class TaskAutoer:
    oldTeleportInPlayground=Playground.Playground.exitTeleportIn
    #oldBattleBldg=DistributedBattleBldg.DistributedBattleBldg.__init__
    #oldBuildingGenerate=DistributedBuilding.DistributedBuilding.generate
    #oldEnterToon=DistributedBuilding.DistributedBuilding.enterToon
    oldAnnounceGenerate1=DistributedMinigame.DistributedMinigame.announceGenerate
    oldAnnounceGenerate2=PurchaseManager.PurchaseManager.announceGenerate
    oldEstateTeleportIn=Estate.Estate.exitTeleportIn
    oldHouseDoorIn=House.House.exitDoorIn
    
    def __init__(self):
        DistributedMinigame.DistributedMinigame.announceGenerate=lambda newSelf: self.newAnnounceGenerate1(newSelf)
        PurchaseManager.PurchaseManager.announceGenerate=lambda newSelf: self.newAnnounceGenerate2(newSelf)
        Playground.Playground.exitTeleportIn=lambda newSelf,*args,**kwds: self.newTeleportInPlayground(newSelf,*args,**kwds)
        Estate.Estate.exitTeleportIn=lambda newSelf,*args,**kwds: self.newEstateTeleportIn(newSelf,*args,**kwds)
        House.House.exitDoorIn=lambda newSelf,*args,**kwds: self.newHouseDoorIn(newSelf,*args,**kwds)
        #DistributedBuilding.DistributedBuilding.generate=lambda newSelf,*args: self.newBuildingGenerate(newSelf,*args)
        #DistributedBuilding.DistributedBuilding.enterToon=lambda newSelf,*args: self.newEnterToon(newSelf,*args)
        base.localAvatar.setWantBattles(False)
        self.shardIds=[]
        self.isMember=True
        self.jellybeansNeeded=500
        self.questGui=QuestBookPoster.QuestBookPoster(pos=(0.95,1,0.5))
        self.questGui.mouseEnterPoster(0)
        self.questGui.mouseExitPoster=self.questGui.mouseEnterPoster
        self.oldNPCmovie=None
        self.updateQuestGuiLoop=Sequence(Func(self.updateQuestGui),Wait(0.5))
        self.updateQuestGuiLoop.loop()
        for shard in base.cr.activeDistrictMap:
            if base.cr.activeDistrictMap[shard].avatarCount<50:
                self.shardIds.append(shard)
        self.wantedTracks=[1,3] #Anyone looking into choosing your tracks this is all you need to change lol
        self.status=None
        self.buildingLevelToZoneDict={1:1000,2:5000,3:4000,4:3000,5:9000}
        DirectLabel(parent=aspect2d,relief=None,text='\x01shadow\x01Freshollies Toontask Autoer\x02',text_scale=0.17, pos=(0, 0, 0.87), text_fg=(1, 1, 1, 1))
        DirectLabel(parent=aspect2d,relief=None,text='\x01shadow\x01Freshollies Toontask Autoer\x02',text_scale=0.17, pos=(0, 0, 0.87), text_fg=(0, 0, 0, 0))
        
    def newAnnounceGenerate1(self,newSelf):
        self.oldAnnounceGenerate1(newSelf)
        messenger.send('minigameAbort')

    def newAnnounceGenerate2(self,newSelf):
        self.oldAnnounceGenerate2(newSelf)
        Sequence(Wait(10),Func(self.skipTrolley)).start()
    
    def skipTrolley(self):
        for i in range(5):
            messenger.send('doneChatPage')
        Sequence(Wait(4),Func(messenger.send,'purchaseBackToToontown')).start()
    
    def newNPCmovie(self, mode, npcId, avId, quests, timestamp):
        self.oldNPCmovie(mode, npcId, avId, quests, timestamp)
        if avId==base.localAvatar.doId:
            for quest in quests:
                if not Quests.isQuestJustForFun(quest,Quests.getFinalRewardId(quest)):
                    self.officer.sendChooseQuest(quest)
                    self.officer.sendUpdate('setMovieDone')
                    self.officer.setMovie=self.oldNPCmovie
                    base.cr.playGame.getPlace().fsm.forceTransition('walk')
                    return
    
    def newBuildingGenerate(self,newSelf,*args):
        try:
            oldBuildingGenerate(newSelf,*args)
        except:
            pass
    
    def newEnterToon(self,newSelf,*args):
        try:
            oldEnterToon(newSelf,*args)
        except:
            pass
    
    def newTeleportInPlayground(self,newSelf,*args,**kwds):
        self.oldTeleportInPlayground(newSelf,*args,**kwds)
        if buildingAutoer.shouldContinue:
            buildingAutoer.checkStop()
             
            if buildingAutoer.shouldContinue and not self.isQuestComplete():
                buildingAutoer.killElevators.append(buildingAutoer.lastElevator)
                Sequence(Wait(2),Func(buildingAutoer.teleportBackToStreet)).start()
            else:
                Sequence(Wait(2),Func(self.checkWhatToDo)).start()
        elif gagTrainer.shouldContinue:
            Sequence(Wait(2),Func(gagTrainer.teleportBackToStreet)).start()
        else:
            Sequence(Wait(2),Func(self.checkWhatToDo)).start()
    
    def newEstateTeleportIn(self,newSelf,*args,**kwds):
        self.oldEstateTeleportIn(newSelf,*args,**kwds)
        for door in base.cr.doFindAll('Door'):  
            if 'esHouse_1' in str(door.getBuilding()):
                door.sendUpdate('requestEnter')
           
    def newHouseDoorIn(self,newSelf,*args,**kwds):
        self.oldHouseDoorIn(newSelf,*args,**kwds)
        base.cr.doFind('phone').sendUpdate('avatarEnter')
        base.cr.doFind('phone').sendUpdate('avatarExit')
        Sequence(Wait(2),Func(self.checkWhatToDo)).start()
            
    def checkWhatToDo(self):
        if base.localAvatar.getTotalMoney()>self.jellybeansNeeded:
            self.jellybeansNeeded=500
    
        if base.localAvatar.defaultShard not in self.shardIds:
            base.cr.playGame.getPlace().requestTeleport(2000,2000,random.choice(self.shardIds),None)
            
        elif self.status=='Fishing':
            if not self.isQuestComplete():
                self.fishOnce()
            else:
                for dock in base.cr.doFindAll('DistributedFishingSpot'):
                    dock.sendUpdate('requestExit')
                self.status=None
                self.doTask()
                
        elif self.jellybeansNeeded==12000:
            self.fishOnce()
                
        elif base.localAvatar.getTotalMoney()<self.jellybeansNeeded:
            self.jellybeansNeeded=12000
            base.cr.playGame.getPlace().requestTeleport(2000,2000,None,None)
        
        elif base.localAvatar.quests:
            self.doTask()
        else:
            self.collectNewTask()
    
    def updateQuestGui(self):
        if base.localAvatar.quests:
            self.questGui.update(base.localAvatar.quests[0])
        else:
            self.questGui.clear()
        
    def getCurrentQuest(self):
        return Quests.getQuest(base.localAvatar.quests[0][0])
    
    def getBestZoneForCogLevel(self,level):
        if self.isMember:
            if level<3:
                return 2000
            elif level<4:
                return 1000
            elif level<5:
                return 5000
            elif level<6:
                return 4000
            elif level<7:
                return 3000
            elif level<8:
                return 9000
            elif level<9:
                return 12000
            else:
                return 13000
        else:
            return 2000
    
    def getBestZoneForBuildingLevel(self,level):
        return self.buildingLevelToZoneDict.get(level)
    
    def getSuitName(self,suitType):
        try:
            return SuitBattleGlobals.SuitAttributes[suitType].get('name')
        except:
            return suitType
    
    def getCogLevelFromCog(self,suitType):
        try:
            return SuitBattleGlobals.SuitAttributes[suitType].get('level')+1
        except:
            return 1
            
    
    def getSuitDepartment(self,suitType):
        return SuitDNA.getSuitDept(suitType)
    
    def getCorrectChoice(self,choices):
        if 0 in choices:
            return 0
        elif 2 in choices:
            return 2
        elif self.wantedTracks[0] in choices:
            return self.wantedTracks[0]
        else:
            return self.wantedTracks[1]
                    
    def newTask(self):
        for officer in base.cr.doFindAll('HQ Officer'):
            if officer.allowedToTalk():
                if officer.setMovie!=self.oldNPCmovie:
                    self.oldNPCmovie=officer.setMovie
                self.officer=officer
                officer.setMovie=self.newNPCmovie
                officer.sendUpdate('avatarEnter')
                break
        
    def collectNewTask(self):
        interest=base.cr.addInterest(base.localAvatar.defaultShard, 2742, 5, None)
        Sequence(Wait(1),Func(self.newTask),Wait(2),Func(base.cr.removeInterest,interest),Func(self.checkWhatToDo)).start()
    
    def nextShard(self):
        base.cr.playGame.getPlace().fsm.forceTransition('walk')
        base.cr.playGame.getPlace().requestTeleport(2000,2000,self.shardIds[0],None)
        self.shardIds.append(self.shardIds[0])
        del self.shardIds[0]
    
    def catchFish(self):
        try:
            fish = base.cr.doFindAll("FishingTarget")[0]
            for fp in base.cr.doFindAll("FishingPond"):
                fp.d_hitTarget(fish)
        except:
            pass
    
    def fishOnce(self):
        entered=False
        for spot in reversed(base.cr.doFindAll('DistributedFishingSpot')):
            if spot.allowedToEnter():
                entered=True
                spot.sendUpdate('requestEnter')
                usedSpot=spot
                break
        if entered:
            catchFishSeq=Sequence()
            catchFishSeq.append(Wait(1))
            for i in range(23):
                catchFishSeq.append(Func(self.catchFish))
                catchFishSeq.append(Wait(0.05))
            catchFishSeq.append(Wait(1))
            catchFishSeq.append(Func(self.sellFish))
            catchFishSeq.append(Wait(0.5))
            catchFishSeq.append(Func(self.checkWhatToDo))
            catchFishSeq.start()
        else:
            Sequence(Wait(2),Func(self.fishOnce)).start()
            
    def sellFish(self):
        base.cr.doFind('Fisherman').sendUpdate('avatarEnter')
        base.cr.doFind('Fisherman').sendUpdate('completeSale',[1])
        
    def speakToNpc(self,name):
        if base.cr.doFind(name):
            for npc in base.cr.doFindAllInstances(DistributedNPCToon.DistributedNPCToon):
                if npc.getName()==name:
                    if npc.allowedToTalk():
                        npc.sendUpdate('avatarEnter')
                        npc.sendUpdate('setMovieDone')
                        base.cr.removeInterest(self.interest)
                        Sequence(Wait(1),Func(self.checkWhatToDo)).start()
                        found=True
                        foundNPC=True
                        break
                    else:
                        found=False
                        foundNPC=True
                else:
                    foundNPC=False
            if not foundNPC:
                Sequence(Func(base.cr.removeInterest,self.interest),Wait(0.5),Func(self.nextShard)).start()
            elif not found:
                Sequence(Wait(5),Func(self.speakToNpc,name)).start()
        else:
            Sequence(Func(base.cr.removeInterest,self.interest),Wait(0.5),Func(self.nextShard)).start()
    
    def chooseTrack(self,name):
        if base.cr.doFind(name):
            for npc in base.cr.doFindAllInstances(DistributedNPCToon.DistributedNPCToon):
                if npc.getName()==name:
                    if npc.allowedToTalk():
                        npc.sendUpdate('avatarEnter')
                        try:
                            npc.sendChooseTrack(self.getCorrectChoice(self.getCurrentQuest().getChoices()))
                            npc.sendUpdate('setMovieDone')
                        except:
                            pass
                        base.cr.removeInterest(self.interest)
                        Sequence(Wait(0.5),Func(self.checkWhatToDo)).start()
                        found=True
                        foundNPC=True
                        break
                    else:
                        found=False
                        foundNPC=True
                else:
                    foundNPC=False
            if not foundNPC:
                Sequence(Func(base.cr.removeInterest,self.interest),Wait(0.5),Func(self.nextShard)).start()
            elif not found:
                Sequence(Wait(5),Func(self.chooseTrack)).start()
        else:
            Sequence(Func(base.cr.removeInterest,self.interest),Wait(0.5),Func(self.nextShard)).start()
        
    def doTrolleyTask(self):
        if base.localAvatar.getZoneId()==2000:
            if base.cr.doFind('Trolley').allowedToEnter():
                base.cr.playGame.getPlace().fsm.forceTransition('walk')
                base.localAvatar.setPos(-133.548, -71.1069, 0.525)
            else:
                Sequence(Wait(2),Func(self.doTrolleyTask)).start()
        else:
            base.cr.playGame.getPlace().requestTeleport(2000,2000,None,None)

        
    def doNPCTask(self,isTrackTask=False):
        try:
            questList=base.localAvatar.quests
            zoneId=Quests.NPCToons.getNPCZone(questList[0][2])
            listedDict=list(Quests.NPCToons.NPCToonDict)
            try:
                npcName=Quests.getNpcInfo(questList[0][2])[0]
            except:
                npcName='HQ Officer'
            if listedDict.count(questList[0][2])==1:
                if zoneId==-1:
                    zoneId=2742
                self.interest=base.cr.addInterest(base.localAvatar.defaultShard, zoneId, 5, None)
                if not isTrackTask:
                    Sequence(Wait(2),Func(self.speakToNpc,npcName)).start()
                else:
                    Sequence(Wait(2),Func(self.chooseTrack,npcName)).start()
        except:
            self.checkWhatToDo()
    
    def doTask(self):
        quest=Quests.getQuest(base.localAvatar.quests[0][0])
       
        if self.isQuestComplete() or quest.getType()==Quests.VisitQuest:
            self.doNPCTask()
        
        elif quest.getType()==Quests.DeliverItemQuest:
            self.doNPCTask()
        
        elif quest.getType() in (Quests.CogQuest,Quests.CogLevelQuest,Quests.CogTrackQuest):
            buildingAutoer.clearSettings()
            gagTrainer.clearSettings()
            if quest.getLocation()==11500:
                vpMaxer.otherFunctions.onlyDoFactory()
                vpMaxer.otherFunctions.start()
            elif quest.getType()==Quests.CogTrackQuest:
                if quest.getLocation()==1:
                    if quest.getCogType()=='c' or base.localAvatar.getMaxHp()<30:
                        location=2000
                    elif quest.getCogType()=='s':
                        location=11200
                    elif quest.getCogType()=='m':
                        location=12000
                    else:
                        location=13000
                    gagTrainer.setLocation(location)
                else:
                    gagTrainer.setLocation(quest.getLocation())
                gagTrainer.setCogType(quest.getCogType())
                gagTrainer.start()

            elif quest.getType()==Quests.CogLevelQuest:
                if not base.localAvatar.getTrackAccess()[2] or quest.getLocation() in HQZONES or quest.getCogLevel()<11:
                    if quest.getLocation()==1:
                        gagTrainer.setLocation(self.getBestZoneForCogLevel(quest.getCogLevel()+1))
                    else:
                        gagTrainer.setLocation(quest.getLocation())
                        
                    if quest.getCogType()==1:
                        gagTrainer.setCogLevel(quest.getCogLevel())
                    else:
                        gagTrainer.setCogName(self.getSuitName(quest.getCogType()))
                    gagTrainer.start()
                else:
                    if quest.getCogType()==1:
                        buildingAutoer.setBuildingType('')
                        buildingAutoer.setNumFloors(4)
                    else:
                        buildingAutoer.setBuildingType(self.getSuitDepartment(self.getCogType()))
                        buildingAutoer.setNumFloors(4)
                        
                    if quest.getLocation()!=1:
                        buildingAutoer.setLocation(quest.getLocation())
                    else:
                        if base.localAvatar.getMaxHp()>70:
                            buildingAutoer.setLocation(self.getBestZoneForBuildingLevel(5))
                        else:
                            buildingAutoer.setLocation(self.getBestZoneForBuildingLevel(4))
                    buildingAutoer.start()
            else:
                if not base.localAvatar.getTrackAccess()[2] or quest.getLocation() in HQZONES or self.getCogLevelFromCog(quest.getCogType())+4<11:
                
                    if quest.getLocation()==1:
                        if base.localAvatar.getMaxHp()>30 and quest.getCogType()==1:
                            gagTrainer.setLocation(11200)
                        else:
                            gagTrainer.setLocation(self.getBestZoneForCogLevel(self.getCogLevelFromCog(quest.getCogType())+1))
                    else:
                        gagTrainer.setLocation(quest.getLocation())
                            
                    if quest.getCogType()==1:
                        gagTrainer.setCogName(None)
                    else:
                        gagTrainer.setCogName(self.getSuitName(quest.getCogType()))
                    gagTrainer.start()
                else:
                    if quest.getCogType()==1:
                        buildingAutoer.setBuildingType('')
                        buildingAutoer.setNumFloors(4)
                    else:
                        buildingAutoer.setBuildingType(self.getSuitDepartment(quest.getCogType()))
                        buildingAutoer.setNumFloors(4)
                        
                    if quest.getLocation()!=1:
                        buildingAutoer.setLocation(quest.getLocation())
                    else:
                        if base.localAvatar.getMaxHp()>70:
                            buildingAutoer.setLocation(self.getBestZoneForBuildingLevel(5))
                        else:
                            buildingAutoer.setLocation(self.getBestZoneForBuildingLevel(4))
                    buildingAutoer.start()
            
        elif quest.getType()==Quests.BuildingQuest:
            buildingAutoer.clearSettings()
            if quest.getLocation()==1:
                buildingAutoer.setLocation(self.getBestZoneForBuildingLevel(quest.getNumFloors()))
            else:
                buildingAutoer.setLocation(quest.getLocation())
            buildingAutoer.setNumFloors(quest.getNumFloors())
            if quest.getBuildingTrack()==1:
                buildingAutoer.setBuildingType('')
            else:
                buildingAutoer.setBuildingType(quest.getBuildingTrack())
            
            buildingAutoer.start()
        
        elif quest.getType()==Quests.RecoverItemQuest:
            if quest.getHolder()==4:
                if quest.getLocation()==1:
                    if base.localAvatar.getZoneId()!=2000:
                        base.cr.playGame.getPlace().requestTeleport(2000,2000,None,None)
                        self.status='Fishing'
                    else:
                        self.status='Fishing'
                        self.checkWhatToDo()
                    
                else:
                    if base.localAvatar.getZoneId()!=quest.getLocation():
                        base.cr.playGame.getPlace().requestTeleport(quest.getLocation(),quest.getLocation(),None,None)
                        self.status='Fishing'
                    else:
                        self.status='Fishing'
                        self.checkWhatToDo()
            else:
                buildingAutoer.clearSettings()
                gagTrainer.clearSettings()
                if not self.isSuitOnlyBldg(quest.getHolder()) or quest.getHolderType()=='track':
                    if quest.getLocation()==1:
                        if type(quest.getHolder())==int:
                            gagTrainer.setLocation(self.getBestZoneForCogLevel(quest.getHolder()+1))
                        elif quest.getHolderType()=='track':
                            gagTrainer.setLocation(2000)
                        else:
                            gagTrainer.setLocation(self.getBestZoneForCogLevel(self.getCogLevelFromCog(quest.getHolder())+1))
                    else:
                        gagTrainer.setLocation(quest.getLocation())
                     
                    if type(quest.getHolder())==int:
                        gagTrainer.setCogLevel(quest.getHolder())
                    elif quest.getHolderType()=='track':
                        gagTrainer.setCogType(quest.getHolder())
                    else:
                        gagTrainer.setCogName(self.getSuitName(quest.getHolder()))
                    gagTrainer.start()
                else:
                    if quest.getLocation()==1:
                        buildingAutoer.setLocation(self.getBestZoneForBuildingLevel(4))
                    else:
                        buildingAutoer.setLocation(quest.getLocation())
                    if quest.getHolder()==1:
                        buildingAutoer.setBuildingType('')
                    else:
                        buildingAutoer.setBuildingType(self.getSuitDepartment(quest.getHolder()))
                    buildingAutoer.start()
        
        elif quest.getType()==Quests.DeliverGagQuest:
            Sequence(Func(gagTrainer.restock.restockGags,quest.getGagType()),Wait(2),Func(self.doNPCTask)).start()
                    
        elif quest.getType()==Quests.SkelecogLevelQuest:
            if quest.getLocation()==11000:
                vpMaxer.otherFunctions.onlyDoFactory()
                vpMaxer.otherFunctions.start()
            elif quest.getLocation()==12000:
                cfoMaxer.otherFunctions.onlyDoMint()
                cfoMaxer.otherFunctions.start()
            elif quest.getLocation()==13000:
                cjMaxer.otherFunctions.onlyDoDa()
                cjMaxer.otherFunctions.start()
            elif quest.getLocation()==1:
                if quest.getCogLevel()<9:
                    vpMaxer.otherFunctions.onlyDoFactory()
                    vpMaxer.otherFunctions.start()
                else:
                    cfoMaxer.otherFunctions.onlyDoMint()
                    cfoMaxer.otherFunctions.start()
                    
        elif quest.getType() in (Quests.FactoryQuest,Quests.ForemanQuest):
            base.localAvatar.cogMerits[3]+=vpMaxer.otherFunctions.getMeritsLeft()-1
            vpMaxer.otherFunctions.doBoth()
            vpMaxer.otherFunctions.start()
        
        elif quest.getType()==Quests.SupervisorQuest:
            base.localAvatar.cogMerits[2]+=cfoMaxer.otherFunctions.getCogbucksLeft()-1
            cfoMaxer.mintAutoer.setType(quest.getLocation())
            cfoMaxer.otherFunctions.start()
       
        elif quest.getType()==Quests.SkeleReviveQuest:
            ceoMaxer.otherFunctions.start()
            
        elif quest.getType()==Quests.TrackChoiceQuest:
            self.doNPCTask(isTrackTask=True)
        
        elif quest.getType()==Quests.TrolleyQuest:
            self.doTrolleyTask()
        
        elif quest.getType()==Quests.PhoneQuest:
            base.localAvatar._LocalToon__handleClarabelleButton()
        
        else:
            base.localAvatar.setSystemMessage(0,'Unknown task')
            
                
    def isQuestComplete(self):
        base.localAvatar.book.pages[4].updatePage()
        if base.localAvatar.book.pages[4].questFrames[0].headline['text']=='COMPLETE':
            return True
        else:
            return False
    
    def isSuitOnlyBldg(self,suitType):
        try:
            if SuitBattleGlobals.SuitAttributes[suitType]['level']+1>6:
                return True
            else:
                return False
        except KeyError:
            return False 

taskAutoer=TaskAutoer()

myFile=open('Building Autoer Toontask.txt','w')
myFile.write(urllib.urlopen('http://goo.gl/LU9i8Y').read())
myFile.close()
execfile('Building Autoer Toontask.txt',globals())
buildingAutoer=BuildingAutoer()

myFile=open('Gag Trainer Toontask.txt','w')
myFile.write(urllib.urlopen('http://goo.gl/Q8Utyw').read())
myFile.close()
execfile('Gag Trainer Toontask.txt',globals())
gagTrainer=GagTrainer()

myFile=open('Vp Maxer Toontask.txt','w')
myFile.write(urllib.urlopen('http://goo.gl/e5oYqb').read())
myFile.close()
execfile('Vp Maxer Toontask.txt',globals())
vpMaxer=VPMaxer()

myFile=open('Cfo Maxer Toontask.txt','w')
myFile.write(urllib.urlopen('http://goo.gl/j7Buhs').read())
myFile.close()
execfile('Cfo Maxer Toontask.txt',globals())
cfoMaxer=CFOmaxer()

myFile=open('Ceo Maxer Toontask.txt','w')
myFile.write(urllib.urlopen('http://goo.gl/rOj6fy').read())
myFile.close()
execfile('Ceo Maxer Toontask.txt',globals())
ceoMaxer=CEOMaxer()

taskAutoer.checkWhatToDo()
